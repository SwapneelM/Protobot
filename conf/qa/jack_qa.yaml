description: >
  Our optimized Jack QA reader which tries to keep up with SotA while being as resource friendly as possible.

parent_config: './conf/qa/modular_qa.yaml'

name: 'jack_qa_reader'

# fixed experiment seed
seed: 1337

# where to store the reader
save_dir: './jack_qa_reader'

with_char_embeddings: True


# To be fast we have to restrict the use of RNNs as much as possible and use convolutions instead
model:
  encoder_layer:
  # Shared Embedding Processing
  # Support
  - input: ['support', 'char_support']
    output: 'support'
    module: 'concat'
  - input: 'support'
    name: 'embedding_highway'
    module: 'highway'
  - input: 'support'
    output: 'emb_support'
    name: 'embedding_projection'
    module: 'dense'
    activation: 'tanh'
    dropout: True
  # Question
  - input: ['question', 'char_question']
    output: 'question'
    module: 'concat'
  - input: 'question'
    name: 'embedding_highway'  # use same network as support
    module: 'highway'
  - input: 'question'
    output: 'emb_question'
    name: 'embedding_projection'  # use same network as support
    module: 'dense'
    activation: 'tanh'
    dropout: True

    # Shared Contextual Encoding
  - input: 'emb_support'
    output: 'support'
    module: 'conv_glu'
    conv_width: 5
    num_layers: 2
    name: 'contextual_encoding'
    dropout: True
  - input: 'emb_question'
    output: 'question'
    module: 'conv_glu'
    conv_width: 5
    num_layers: 2
    name: 'contextual_encoding'  # use same network as support
    dropout: True

  - input: ['emb_question', 'question']
    output: 'enc_question'
    module: 'concat'
  - input: ['emb_support', 'support']
    output: 'enc_support'
    module: 'concat'

  # Attention
  - input: 'enc_support'
    dependent: 'enc_question'
    output: 'support'
    module: 'attention_matching'
    attn_type: 'diagonal_bilinear'
    with_sentinel: True  # we gate the attention with an additional scalar sentinel because what we retrieve might actually not be what we were looking for because (softmax) attn always retrieves something
    scaled: True
  - input: 'support'
    output: 'support_self'
    module: 'dense'
    activation: 'tanh'

  # Self Attention
  - input: 'support_self'
    module: 'self_attn'
    attn_type: 'diagonal_bilinear'
    scaled: True
    with_sentinel: True  # we gate the attention with an additional scalar sentinel because what we retrieve might actually not be what we were looking for because (softmax) attn always retrieves something
    num_attn_heads: 1
  - input: ['support', 'support_self']
    output: 'support'
    module: 'concat'
  - input: 'support'
    module: 'dense'
    activation: 'relu'
    dropout: True

  # BiLSTM
  - input: 'support'
    module: 'lstm'  # the only application of a RNN
    with_projection: True
    activation: 'tanh'
    dropout: True

  - input: 'support'
    module: 'conv_glu'
    conv_width: 5
    num_layers: 1
    residual: True

  answer_layer:
    support: 'support'
    question: 'enc_question'
    module: 'bilinear'
